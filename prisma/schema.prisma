// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model Unit {
  id               String            @id @default(uuid())
  name             String            @unique
  description      String?
  type             UnitType?
  floatUnits       FloatUnit[]
  intUnits         IntUnit[]
  fields           Field[]
  soils            Soil[]
  materials        Material[]
  materialUsages   MaterialUsage[]
  equipmentDetails EquipmentDetail[]
  equipmentUsages  EquipmentUsage[]
  crops            Crop[]
}

enum UnitType {
  QUANTITY
  TEMPERATURE
  ATMOSPHERICPRESSURE
  RAINFALL
  PERCENT
  WEIGHT
  LENGTH
  VOLUME
  NUTRIENT
  DATE
  MONEY
}

model FloatUnit {
  id     String  @id @default(uuid())
  value  Float?
  unitId String?
  unit   Unit?   @relation(fields: [unitId], references: [id], onDelete: SetNull)

  temperatures         Weather[] @relation(name: "temperature")
  atmosphericPressures Weather[] @relation(name: "atmosphericPressure")

  idealTemperatures Plant[]      @relation(name: "idealTemperature")
  waterRequirements Plant[]      @relation(name: "waterRequirement")
  fertilizerDosages Fertilizer[] @relation(name: "fertilizerDosage")
  pesticideDosages  Pesticide[]  @relation(name: "pesticideDosage")

  purchasePrices Equipment[] @relation(name: "purchasePrice")

  plantFertilizerDosages PlantFertilizer[]
  plantPesticideDosages  PlantPesticide[]
}

model IntUnit {
  id    String @id @default(uuid())
  value Int?

  unitId String?
  unit   Unit?   @relation(fields: [unitId], references: [id], onDelete: SetNull)

  humidities Weather[] @relation(name: "humidity")
  moistures  Soil[]    @relation(name: "moisture")

  rainfalls         Weather[]   @relation(name: "rainfall")
  idealHumidities   Plant[]     @relation(name: "idealHumidity")
  withdrawalPeriods Pesticide[] @relation(name: "withdrawalPeriod")
}

enum CategoryType {
  PLANT
  SEED
  ACTIVITY
  PLANT_STAGE
  ENERGY
}

model Category {
  id          String        @id @default(uuid())
  name        String
  description String?
  slug        String        @unique
  type        CategoryType?
  plants      Plant[]
}

enum JobExperience {
  NONE
  ONE
  TWO
  FIVE
  TEN
  GREATER_THAN_TEN
}

enum Gender {
  MALE
  FEMALE
  NONE
}

enum JobWorkingState {
  PART_TIME
  FULL_TIME
}

model Job {
  id          String @id @default(uuid())
  name        String
  description String
  requirement String
  rights      String
  workingTime String
  wage        String
  slug        String @unique

  quantity     Int
  experience   JobExperience
  gender       Gender
  workingState JobWorkingState

  published Boolean  @default(false)
  expiredAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  applicants Applicant[]
}

enum ApplicantStatus {
  NEW
  CONFIRM
}

enum StaffRole {
  superadmin
  admin
  farmer
}

model Staff {
  id         String    @id @default(uuid())
  externalId String    @unique
  name       String
  email      String    @unique
  imageUrl   String?
  phone      String?
  address    String?
  role       StaffRole

  baseHourlyWage Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  weatherConfirmations Weather[]
  soilConfirmations    Soil[]
  messages             Message[]
  files                File[]
  activityCreatedBy    Activity[]         @relation(name: "createdBy")
  activityAssigned     ActivityAssigned[]
  equipmentUsages      EquipmentUsage[]
}

model Applicant {
  id String @id @default(uuid())

  name    String
  email   String
  phone   String
  address String
  note    String?

  jobId String
  job   Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)

  status ApplicantStatus @default(NEW)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, jobId])
}

enum WeatherStatus {
  SUNNY
  CLOUDY
  RAINY
  FOGGY
  SNOWY
  WINDY
  STORMY
}

model Weather {
  id String @id @default(uuid())

  temperatureId String?
  temperature   FloatUnit? @relation(name: "temperature", fields: [temperatureId], references: [id], onDelete: SetNull)

  humidityId String?
  humidity   IntUnit? @relation(name: "humidity", fields: [humidityId], references: [id], onDelete: SetNull)

  atmosphericPressureId String?
  atmosphericPressure   FloatUnit? @relation(name: "atmosphericPressure", fields: [atmosphericPressureId], references: [id], onDelete: SetNull)

  rainfallId String?
  rainfall   IntUnit? @relation(name: "rainfall", fields: [rainfallId], references: [id], onDelete: SetNull)

  status WeatherStatus

  fieldId String
  field   Field  @relation(fields: [fieldId], references: [id])

  confirmed     Boolean   @default(false)
  confirmedAt   DateTime?
  confirmedById String?
  confirmedBy   Staff?    @relation(fields: [confirmedById], references: [id])

  pinned Boolean @default(false)
  note   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SoilType {
  SAND
  CLAY
  ALLUVIUM
  LOAM
}

model Soil {
  id String @id @default(uuid())

  ph         Float?
  moistureId String?
  moisture   IntUnit? @relation("moisture", fields: [moistureId], references: [id], onDelete: SetNull)

  nutrientNitrogen   Float?
  nutrientPhosphorus Float?
  nutrientPotassium  Float?
  nutrientUnitId     String?
  nutrientUnit       Unit?   @relation(fields: [nutrientUnitId], references: [id], onDelete: SetNull)
  fieldId            String

  field Field @relation(fields: [fieldId], references: [id])

  pinned        Boolean   @default(false)
  note          String?
  confirmed     Boolean   @default(false)
  confirmedAt   DateTime?
  confirmedById String?
  confirmedBy   Staff?    @relation(fields: [confirmedById], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Field {
  id String @id @default(uuid())

  name  String
  orgId String?

  //manage width, height, area, shape
  area     Float?
  unitId   String?
  unit     Unit?     @relation(fields: [unitId], references: [id], onDelete: SetNull)
  shape    String?
  soilType SoilType?
  note     String?

  location  String?
  latitude  Float?
  longitude Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  crops    Crop[]
  weathers Weather[]
  soils    Soil[]
}

enum Season {
  SPRING
  SUMMER
  AUTUMN
  WINTER
}

model Plant {
  id String @id @default(uuid())

  name       String
  imageUrl   String?
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  growthDuration     String? // Số ngày từ khi gieo trồng đến thu hoạch
  season             Season? // Mùa vụ phù hợp
  idealTemperatureId String? // Nhiệt độ lý tưởng
  idealHumidityId    String? // Độ ẩm lý tưởng
  waterRequirementId String? // Lượng nước cần thiết
  fertilizerType     FertilizerType? // Loại phân bón nên sử dụng

  // Liên kết với các bảng khác
  idealTemperature FloatUnit? @relation(name: "idealTemperature", fields: [idealTemperatureId], references: [id], onDelete: SetNull)
  idealHumidity    IntUnit?   @relation(name: "idealHumidity", fields: [idealHumidityId], references: [id], onDelete: SetNull)
  waterRequirement FloatUnit? @relation(name: "waterRequirement", fields: [waterRequirementId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  crops            Crop[]
  plantFertilizers PlantFertilizer[]
  plantPesticides  PlantPesticide[]
}

enum FertilizerType {
  ORGANIC
  INORGANIC
  BIO
}

enum Frequency {
  WEEKLY
  MONTHLY
  YEARLY
  CROP
}

model Fertilizer {
  id String @id @default(uuid())

  name String
  type FertilizerType?

  nutrientOfNPK String? // NPK ratio
  manufacturer  String?

  recommendedDosageId String? // Liều lượng khuyến nghị
  recommendedDosage   FloatUnit? @relation(name: "fertilizerDosage", fields: [recommendedDosageId], references: [id], onDelete: SetNull)
  applicationMethod   String? // Phương pháp sử dụng
  composition         String? // Thành phần chi tiết
  frequencyOfUse      Frequency? // Tần suất sử dụng

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  plantFertilizers PlantFertilizer[]
}

enum PesticideType {
  PESTICIDE
  HERBICIDE
  FUNGICIDE
}

enum ToxicityLevel {
  LOW
  MID
  HIGH
}

model Pesticide {
  id String @id @default(uuid())

  name         String
  type         PesticideType?
  ingredient   String?
  manufacturer String?

  withdrawalPeriodId String? // Thời gian cách ly trước thu hoạch days
  withdrawalPeriod   IntUnit?       @relation(name: "withdrawalPeriod", fields: [withdrawalPeriodId], references: [id], onDelete: SetNull)
  toxicityLevel      ToxicityLevel? // Mức độ độc tính

  recommendedDosageId String? // Liều lượng khuyến nghị
  recommendedDosage   FloatUnit? @relation(name: "pesticideDosage", fields: [recommendedDosageId], references: [id], onDelete: SetNull)
  applicationMethod   String? // Phương pháp sử dụng

  plantPesticides PlantPesticide[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PlantFertilizer {
  id           String     @id @default(uuid())
  plantId      String
  fertilizerId String
  stage        String // Giai đoạn cây trồng (ví dụ: Gieo trồng, Phát triển, Thu hoạch)
  dosageId     String? // Liều lượng thuốc bảo vệ thực vật cho giai đoạn này
  dosage       FloatUnit? @relation(fields: [dosageId], references: [id], onDelete: SetNull)
  note         String?
  // Liên kết với bảng Plant và Pesticide
  plant        Plant      @relation(fields: [plantId], references: [id])
  fertilizer   Fertilizer @relation(fields: [fertilizerId], references: [id])

  @@unique([plantId, fertilizerId, stage])
}

model PlantPesticide {
  id          String     @id @default(uuid())
  plantId     String
  pesticideId String
  stage       String // Giai đoạn cây trồng (ví dụ: Gieo trồng, Phát triển, Thu hoạch)
  dosageId    String? // Liều lượng thuốc bảo vệ thực vật cho giai đoạn này
  dosage      FloatUnit? @relation(fields: [dosageId], references: [id], onDelete: SetNull)
  note        String?

  // Liên kết với bảng Plant và Pesticide
  plant     Plant     @relation(fields: [plantId], references: [id])
  pesticide Pesticide @relation(fields: [pesticideId], references: [id])

  @@unique([plantId, pesticideId, stage])
}

model Message {
  id      String @id @default(uuid())
  content String

  staffId String
  staff   Staff  @relation(fields: [staffId], references: [id], onDelete: Cascade)

  orgId String?
  files File[]

  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([staffId, orgId])
}

model File {
  id       String  @id @default(uuid())
  name     String
  type     String
  url      String  @unique
  key      String  @unique
  isPublic Boolean @default(false)
  orgId    String?
  ownerId  String
  owner    Staff   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  messageId String?
  message   Message?  @relation(fields: [messageId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   Boolean   @default(false)
  deletedAt DateTime?
}

enum EquipmentType {
  AgriculturalMachine // Máy nông nghiệp
  ManualTool // Công cụ thủ công
  IrrigationSystem // Hệ thống tưới tiêu
  Vehicle // Xe cộ
}

model Equipment {
  id              String        @id @default(uuid())
  name            String
  type            EquipmentType
  brand           String?
  purchaseDate    DateTime?
  purchasePriceId String?
  purchasePrice   FloatUnit?    @relation(name: "purchasePrice", fields: [purchasePriceId], references: [id], onDelete: SetNull)
  description     String?
  imageUrl        String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  equipmentDetails EquipmentDetail[]
}

enum EquipmentStatus {
  MAINTENANCE
  WORKING
  DECOMMISSION
  AVAILABLE
}

model EquipmentDetail {
  id     String          @id @default(uuid())
  name   String?
  status EquipmentStatus @default(AVAILABLE)

  lastMaintenanceDate DateTime?
  operatingHours      Float     @default(0) // Số giờ hoạt động
  maxOperatingHours   Float
  location            String?

  equipmentId String
  equipment   Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  equipmentUsages EquipmentUsage[]

  maxFuelConsumption Float?
  unitId             String?
  unit               Unit?   @relation(fields: [unitId], references: [id])
  energyType         String?
  baseFuelPrice      Float?
}

model EquipmentUsage {
  id                String   @id @default(uuid())
  activityId        String?
  equipmentDetailId String
  usageStartTime    DateTime // Start time of equipment usage
  duration          Float // hour usage
  operatorId        String?
  note              String? // Additional notes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  equipmentDetail EquipmentDetail @relation(fields: [equipmentDetailId], references: [id])
  activity        Activity?       @relation(fields: [activityId], references: [id], onDelete: SetNull)
  operator        Staff?          @relation(fields: [operatorId], references: [id], onDelete: SetNull) // Operator

  fuelConsumption Float?
  unitId          String?
  unit            Unit?   @relation(fields: [unitId], references: [id])
  fuelPrice       Float?
  rentalPrice     Float?
}

enum MaterialType {
  FERTILIZER
  PESTICIDE
  SEED
  OTHER
}

model Material {
  id              String  @id @default(uuid())
  name            String // Name of the material (e.g., "Fertilizer Type A")
  description     String?
  imageUrl        String?
  quantityInStock Float // Current stock quantity

  unitId String

  type   MaterialType
  typeId String?

  basePrice Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  materialUsages MaterialUsage[] // Relation to usage records
  unit           Unit            @relation(fields: [unitId], references: [id])
}

model MaterialUsage {
  id           String  @id @default(uuid())
  activityId   String?
  materialId   String
  quantityUsed Float // Quantity used in the activity
  actualPrice  Float?
  unitId       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  activity Activity? @relation(fields: [activityId], references: [id], onDelete: SetNull)
  material Material  @relation(fields: [materialId], references: [id])
  unit     Unit      @relation(fields: [unitId], references: [id])
}

enum ActivityType {
  FERTILIZER
  PESTICIDE
  EQUIPMENT
  WATERING
  OTHER
}

enum ActivityPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum CropStatus {
  NEW
  MEDIUM
  MATURE
  HARVEST
  FINISH
}

model Crop {
  id   String @id @default(uuid())
  name String

  startDate DateTime
  endDate   DateTime?

  fieldId String
  field   Field  @relation(fields: [fieldId], references: [id])

  plantId String
  plant   Plant  @relation(fields: [plantId], references: [id])

  unitId         String
  unit           Unit   @relation(fields: [unitId], references: [id])
  estimatedYield Float
  actualYield    Float?

  status CropStatus @default(NEW) // Tình trạng mùa vụ

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  learnedLessons String?

  activities Activity[]
}

model ActivityAssigned {
  id         String   @id @default(uuid())
  activityId String
  staffId    String
  assignedAt DateTime @default(now())

  actualWork Float? // actual hour working
  hourlyWage Float? // hour wage

  activity Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  staff    Staff    @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@unique([activityId, staffId])
}

enum ActivityStatus {
  NEW
  PENDING
  IN_PROGRESS
  COMPLETED
}

model Activity {
  id           String           @id @default(uuid())
  name         String
  description  String?
  cropId       String
  activityDate DateTime // Scheduled or actual date of the activity
  status       ActivityStatus   @default(NEW)
  priority     ActivityPriority @default(LOW) // Enum: "Low", "Medium", "High", "Urgent"

  estimatedDuration Float // Estimated duration in hours
  actualDuration    Float? // Actual duration in hours

  createdById String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  equipmentUseds EquipmentUsage[] // Relation to equipment used
  materialUseds  MaterialUsage[]
  createdBy      Staff              @relation(name: "createdBy", fields: [createdById], references: [id])
  crop           Crop               @relation(fields: [cropId], references: [id])
  assignedTo     ActivityAssigned[]

  totalStaffCost     Float?
  totalMaterialCost  Float?
  totalEquipmentCost Float?
}
